{"version":3,"sources":["components/Onboarding.js","components/Projects.js","contexts/panel-context.js","components/SlidingPanel.js","utils/terminal.js","components/Terminal.js","components/Homepage.js","serviceWorker.js","index.js"],"names":["Onboarding","className","role","aria-label","src","alt","href","target","rel","width","Projects","PanelContext","React","createContext","PanelProvider","Provider","PanelConsumer","Consumer","SlidingPanel","panelContext","step","updateStep","renderStep","commandHelperHints","result","Object","values","loading","Terminal","useState","commandHistory","command","setCommand","handleInputChange","e","value","handleTerminalKeyPressed","key","hasPressedEnter","push","map","cmd","i","onKeyDown","autoFocus","type","onChange","tabIndex","Homepage","currentStep","setCurrentStep","desiredStep","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79158326.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Onboarding.scss';\r\n\r\nconst Onboarding = () => (\r\n  <div className=\"onboarding\">\r\n    <div className=\"onboarding__information-basic\">\r\n      <p className=\"onboarding__name\">Heya! \r\n        <span role=\"img\" className=\"onboarding__waving-hand\" aria-label=\"wave\">ðŸ‘‹</span> \r\n        I'm <span className=\"onboarding__name--heavy\">nikoto.</span>\r\n      </p>\r\n      <p className=\"onboarding__occupation\">\r\n        Software Engineer<br />\r\n        @ Spotahome <img className=\"onboarding__spotahome\" src=\"./images/spotahome.jpg\" alt=\"spotahome logo\" />\r\n      </p>\r\n    </div>\r\n\r\n    <code className=\"onboarding__teaser\">Want to know me better? Use the terminal. <br />Start by typing \"help\" and pressing enter.</code>\r\n\r\n    <div className=\"onboarding__information-socials\">\r\n      <a href=\"https://github.com/nikotomad\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"onboarding__information-socials-link\">\r\n        <img \r\n          className=\"onboarding__information-icon\" \r\n          src=\"./images/icon-github.svg\" \r\n          width=\"40\"\r\n          alt=\"github\"\r\n        />\r\n        Github\r\n      </a>\r\n      <a href=\"https://www.linkedin.com/in/nikolaasverlee/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"onboarding__information-socials-link\">\r\n        <img \r\n          className=\"onboarding__information-icon\" \r\n          src=\"./images/icon-linkedin.webp\" \r\n          width=\"40\"\r\n          alt=\"linkedin\"\r\n        />\r\n        Linkedin\r\n      </a>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Onboarding;","import React from 'react';\r\n\r\nconst Projects = () => (\r\n  <div>\r\n    <h1>Projects</h1>\r\n  </div>\r\n);\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\n\r\nconst PanelContext = React.createContext();\r\n\r\nexport const PanelProvider = PanelContext.Provider\r\nexport const PanelConsumer = PanelContext.Consumer\r\n\r\nexport default PanelContext;","import React from 'react';\r\n\r\nimport Onboarding from './Onboarding';\r\nimport Projects from './Projects';\r\n\r\nimport { PanelConsumer } from '../contexts/panel-context';\r\n\r\nimport './SlidingPanel.scss';\r\n\r\nconst renderStep = (step, updateStep) => {\r\n  switch(step) {\r\n    case 'onboarding': \r\n      return <Onboarding />\r\n    case 'projects':\r\n      return <Projects />\r\n    default:\r\n      return <Onboarding />\r\n  }\r\n}\r\n\r\nconst SlidingPanel = () => (\r\n  <PanelConsumer>\r\n    {panelContext => (\r\n      <div className=\"sliding-panel\">\r\n        {renderStep(panelContext.step)}\r\n      </div>\r\n    )}\r\n  </PanelConsumer>\r\n);\r\n\r\nexport default SlidingPanel;","import React from 'react';\r\n\r\nconst availableCommands = ['about', 'team', 'skills'];\r\n\r\nexport const commandHelperHints = {\r\n  'help': {\r\n    result: `[available commands are]: ${Object.values(availableCommands)}`\r\n  },\r\n  'about': {\r\n    result: 'Based in Madrid. Software Engineer. Worst engineer at the company but third coolest.'\r\n  },\r\n  'team': {\r\n    result: <img loading=\"eager\" src=\"./images/broccoli.png\" alt=\"brocolli\" width=\"50\"/>\r\n  },\r\n  'skills': {\r\n    result: \r\n    <>\r\n      <p>Frontend: React, React Native, Redux</p>\r\n      <p>Backend & DB: Node.js + Mongo</p>\r\n      <p>Testing: Jest, Cypress, Detox</p>\r\n      <p>Other: Test driven development, BDD, Kibana, Grafana</p>\r\n    </>\r\n  },\r\n  'clear': {\r\n    result: ''\r\n  },\r\n  'whois weapon': {\r\n    result: <img src=\"./images/avatar-niko.jpg\" alt=\"weapon\" width=\"100\"/>\r\n  },\r\n}","/* eslint-disable no-mixed-operators */\r\nimport React, { useState } from 'react';\r\n\r\nimport { commandHelperHints } from '../utils/terminal';\r\n\r\nimport { PanelConsumer } from '../contexts/panel-context';\r\n\r\nimport './Terminal.scss';\r\n\r\nconst PATH_PREFIX = \"/dev/guest\";\r\n\r\nconst Terminal = ({ panelContext }) => {\r\n  const [commandHistory, setCommandHistory] = useState([]);\r\n  const [command, setCommand] = useState('');\r\n\r\n  const handleInputChange = e => \r\n    setCommand(e.target.value);\r\n\r\n  const clearCommandEmitter = () => \r\n    setCommand('');\r\n\r\n  const handleTerminalKeyPressed = ({ key }) => {\r\n    const hasPressedEnter = key === 'Enter';\r\n    \r\n    if (command && key === 'Enter') {\r\n      commandHistory.push(command);\r\n      clearCommandEmitter();\r\n    }\r\n\r\n    if (command === 'about' && hasPressedEnter) {\r\n      panelContext.updateStep('onboarding')\r\n    }\r\n\r\n    if (command === 'projects' && hasPressedEnter) {\r\n      panelContext.updateStep('projects')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PanelConsumer>\r\n      {panelContext => (\r\n        <div className=\"terminal\">\r\n          <div className=\"terminal__navbar\">\r\n            <span className=\"terminal__navbar-close\" />\r\n          </div>\r\n          <div className=\"terminal__screen\">\r\n            <p className=\"terminal__screen-hint\"></p>\r\n            <div className=\"terminal__screen-results\">\r\n              {commandHistory.map((cmd, i) => (\r\n                <div className=\"terminal__screen-row\" key={`${cmd}${i}`}>\r\n                  <p className=\"terminal__command\">\r\n                    {`${PATH_PREFIX} â†’ ${cmd}`}\r\n                  </p>\r\n                  <p className=\"terminal__result\">\r\n                    {\r\n                      commandHelperHints[cmd] && commandHelperHints[cmd].result \r\n                      || 'Command not found. Type \"help\" for more info.'\r\n                    }\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"terminal__actions\" onKeyDown={handleTerminalKeyPressed}>\r\n              <span className=\"terminal__actions-symbol\">{`$ ${PATH_PREFIX}`}</span>\r\n              <input \r\n                autoFocus \r\n                type=\"text\" \r\n                className=\"terminal__actions-command\" \r\n                value={command}\r\n                onChange={handleInputChange}\r\n                tabIndex=\"0\"\r\n              />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </PanelConsumer>\r\n  )\r\n}\r\n\r\nexport default Terminal;\r\n","import React, { useState } from 'react';\r\n\r\nimport SlidingPanel from './SlidingPanel';\r\nimport Terminal from './Terminal';\r\n\r\nimport { PanelProvider } from '../contexts/panel-context';\r\n\r\nimport './Homepage.scss';\r\n\r\nconst DEFAULT_INITIAL_STEP = 'onboarding';\r\n\r\nconst Homepage = () => {\r\n  const [currentStep, setCurrentStep] = useState(DEFAULT_INITIAL_STEP);\r\n\r\n  const panelContext = {\r\n    step: currentStep,\r\n    updateStep: desiredStep =>\r\n      setCurrentStep(desiredStep)\r\n  }\r\n  \r\n  return (\r\n    <PanelProvider value={panelContext}>\r\n      <div className=\"homepage\">\r\n        <SlidingPanel panelContext={panelContext} />\r\n        <Terminal panelContext={panelContext} />\r\n      </div>\r\n    </PanelProvider>\r\n  )\r\n}\r\n\r\nexport default Homepage;","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Homepage from './components/Homepage';\r\n\r\nimport './resets.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Homepage />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}