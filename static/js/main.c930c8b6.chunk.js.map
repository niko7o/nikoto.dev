{"version":3,"sources":["components/Onboarding.js","components/SlidingPanel.js","utils/terminal.js","components/Terminal.js","components/Homepage.js","serviceWorker.js","index.js"],"names":["Bio","className","role","aria-label","src","alt","href","target","width","SlidingPanel","step","children","renderStep","propTypes","PropTypes","string","defaultProps","commands","result","Object","values","loading","Terminal","useState","commandHistory","command","setCommand","map","cmd","i","key","onKeyDown","push","tabIndex","autoFocus","type","value","onChange","e","Onboarding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRA0BeA,G,MAtBH,kBACV,yBAAKC,UAAU,OACb,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,aAAb,SAA+B,0BAAMC,KAAK,MAAMD,UAAU,mBAAmBE,aAAW,QAAzD,gBAA/B,QAA6G,0BAAMF,UAAU,oBAAhB,YAC7G,uBAAGA,UAAU,mBAAb,oBAAgD,6BAAhD,eAAkE,yBAAKA,UAAU,iBAAiBG,IAAI,yBAAyBC,IAAI,qBAGrI,0BAAMJ,UAAU,eAAhB,6CAAwE,6BAAxE,8CAEA,yBAAKA,UAAU,4BACb,uBAAGK,KAAK,+BAA+BC,OAAO,SAASN,UAAU,iCAC/D,yBAAKA,UAAU,wBAAwBG,IAAI,2BAA2BI,MAAM,OAD9E,UAIA,uBAAGF,KAAK,8CAA8CC,OAAO,SAASN,UAAU,iCAC9E,yBAAKA,UAAU,wBAAwBG,IAAI,8BAA8BI,MAAM,OADjF,gBCJAC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,EAASC,SAAT,OACnB,oCAViB,SAAAD,GACjB,OAAOA,GACL,IAAK,aAEL,QACE,OAAO,kBAAC,EAAD,OAMRE,CAAWF,KAIhBD,EAAaI,UAAY,CACvBH,KAAMI,IAAUC,QAGlBN,EAAaO,aAAc,CACzBN,KAAM,cAGOD,Q,OCxBFQ,EAAW,CACtB,KAAQ,CACNC,OAAO,6BAAD,OAA+BC,OAAOC,OAJtB,CAAC,QAAS,OAAQ,aAM1C,MAAS,CACPF,OAAQ,wFAEV,KAAQ,CACNA,OAAQ,yBAAKG,QAAQ,QAAQjB,IAAI,wBAAwBC,IAAI,WAAWG,MAAM,QAEhF,OAAU,CACRU,OACA,oCACE,mEACA,4DACA,4DACA,qFAGJ,MAAS,CACPA,OAAQ,IAEV,eAAgB,CACdA,OAAQ,yBAAKd,IAAI,2BAA2BC,IAAI,SAASG,MAAM,UCoBpDc,G,MAvCE,WAAO,IAAD,EACuBC,mBAAS,IADhC,mBACdC,EADc,aAESD,mBAAS,KAFlB,mBAEdE,EAFc,KAELC,EAFK,KAerB,OACE,yBAAKzB,UAAU,YACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,4BAElB,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,0BACb,yBAAKA,UAAU,4BACZuB,EAAeG,KAAI,SAACC,EAAKC,GAAN,OAClB,yBAAK5B,UAAU,uBAAuB6B,IAAG,UAAKF,GAAL,OAAWC,IAClD,uBAAG5B,UAAU,qBAAb,UA3BM,aA2BN,mBAAsD2B,IACtD,uBAAG3B,UAAU,oBAAoBgB,EAASW,IAAQX,EAASW,GAAKV,QAAU,uDAKlF,yBAAKjB,UAAU,oBAAoB8B,UAvBN,SAAC,GACpB,UADgC,EAAVD,MAEhCN,EAAeQ,KAAKP,GAJUC,EAAW,OA0BrC,0BAAMzB,UAAU,4BAAhB,YAlCU,eAmCZ,2BAAOgC,SAAS,IAAIC,WAAS,EAACjC,UAAU,4BAA4BkC,KAAK,OAAOC,MAAOX,EAASY,SA7B5E,SAAAC,GAAC,OAAIZ,EAAWY,EAAE/B,OAAO6B,cCEtCG,G,MAPI,kBACjB,yBAAKtC,UAAU,YACb,kBAAC,EAAD,CAAcS,KAAM,eACpB,kBAAC,EAAD,S,MCEgB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c930c8b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Onboarding.scss';\r\n\r\nconst Bio = () => (\r\n  <div className=\"bio\">\r\n    <div className=\"bio__information-basic\">\r\n      <p className=\"bio__name\">Heya! <span role=\"img\" className=\"bio__waving-hand\" aria-label=\"wave\">ðŸ‘‹</span> I'm <span className=\"bio__name--heavy\">nikoto.</span></p>\r\n      <p className=\"bio__occupation\">Software Engineer<br />@ Spotahome <img className=\"bio__spotahome\" src=\"./images/spotahome.jpg\" alt=\"spotahome logo\" /></p>\r\n    </div>\r\n\r\n    <code className=\"bio__teaser\">Want to know me better? Use the terminal. <br />Start by typing \"help\" and pressing enter.</code>\r\n\r\n    <div className=\"bio__information-socials\">\r\n      <a href=\"https://github.com/nikotomad\" target=\"_blank\" className=\"bio__information-socials-link\">\r\n        <img className=\"bio__information-icon\" src=\"./images/icon-github.svg\" width=\"40\"/>\r\n        Github\r\n      </a>\r\n      <a href=\"https://www.linkedin.com/in/nikolaasverlee/\" target=\"_blank\" className=\"bio__information-socials-link\">\r\n        <img className=\"bio__information-icon\" src=\"./images/icon-linkedin.webp\" width=\"40\"/>\r\n        Linkedin\r\n      </a>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Bio;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Onboarding from './Onboarding';\r\n\r\nconst renderStep = step => {\r\n  switch(step) {\r\n    case 'onboarding': \r\n      return <Onboarding />\r\n    default:\r\n      return <Onboarding />\r\n  }\r\n}\r\n\r\nconst SlidingPanel = ({ step, children }) => (\r\n  <>\r\n    {renderStep(step)}\r\n  </>\r\n);\r\n\r\nSlidingPanel.propTypes = {\r\n  step: PropTypes.string\r\n}\r\n\r\nSlidingPanel.defaultProps= {\r\n  step: 'onboarding'\r\n}\r\n\r\nexport default SlidingPanel;","import React from 'react';\r\n\r\nconst availableCommands = ['about', 'team', 'skills'];\r\n\r\nexport const commands = {\r\n  'help': {\r\n    result: `[available commands are]: ${Object.values(availableCommands)}`\r\n  },\r\n  'about': {\r\n    result: 'Based in Madrid. Software Engineer. Worst engineer at the company but third coolest.'\r\n  },\r\n  'team': {\r\n    result: <img loading=\"eager\" src=\"./images/broccoli.png\" alt=\"brocolli\" width=\"50\"/>\r\n  },\r\n  'skills': {\r\n    result: \r\n    <>\r\n      <p>Frontend: React, React Native, Redux</p>\r\n      <p>Backend & DB: Node.js + Mongo</p>\r\n      <p>Testing: Jest, Cypress, Detox</p>\r\n      <p>Other: Test driven development, BDD, Kibana, Grafana</p>\r\n    </>\r\n  },\r\n  'clear': {\r\n    result: ''\r\n  },\r\n  'whois weapon': {\r\n    result: <img src=\"./images/avatar-niko.jpg\" alt=\"weapon\" width=\"100\"/>\r\n  },\r\n}","import React, { useState } from 'react';\r\n\r\nimport { commands } from '../utils/terminal';\r\n\r\nimport './Terminal.scss';\r\n\r\nconst PATH_PREFIX = \"/dev/guest\";\r\n\r\nconst Terminal = () => {\r\n  const [commandHistory, setCommandHistory] = useState([]);\r\n  const [command, setCommand] = useState('');\r\n\r\n  const handleInputChange = e => setCommand(e.target.value);\r\n\r\n  const clearCommandEmitter = () => setCommand('');\r\n\r\n  const handleTerminalKeyPressed = ({ key }) => {\r\n    if (key === 'Enter') {\r\n      commandHistory.push(command);\r\n      clearCommandEmitter();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"terminal\">\r\n      <div className=\"terminal__navbar\">\r\n        <span className=\"terminal__navbar-close\" />\r\n      </div>\r\n      <div className=\"terminal__screen\">\r\n        <p className=\"terminal__screen-hint\"></p>\r\n        <div className=\"terminal__screen-results\">\r\n          {commandHistory.map((cmd, i) => (\r\n            <div className=\"terminal__screen-row\" key={`${cmd}${i}`}>\r\n              <p className=\"terminal__command\">{`${PATH_PREFIX} â†’ ${cmd}`}</p>\r\n              <p className=\"terminal__result\">{commands[cmd] && commands[cmd].result || 'Command not found. Type \"help\" for more info.'}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"terminal__actions\" onKeyDown={handleTerminalKeyPressed}>\r\n          <span className=\"terminal__actions-symbol\">{`$ ${PATH_PREFIX}`}</span>\r\n        <input tabIndex=\"0\" autoFocus className=\"terminal__actions-command\" type=\"text\" value={command} onChange={handleInputChange}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Terminal;\r\n","import React from 'react';\r\n\r\nimport SlidingPanel from './SlidingPanel';\r\nimport Terminal from './Terminal';\r\n\r\nimport './Homepage.scss';\r\n\r\nconst Onboarding = () => (\r\n  <div className=\"homepage\">\r\n    <SlidingPanel step={'onboarding'} />\r\n    <Terminal />\r\n  </div>\r\n)\r\n\r\nexport default Onboarding;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Homepage from './components/Homepage';\r\n\r\nimport './resets.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Homepage />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}