{"version":3,"sources":["components/Bio.js","components/Terminal.js","components/Homepage.js","serviceWorker.js","index.js"],"names":["Bio","className","src","href","target","width","commands","result","Terminal","useState","commandHistory","command","setCommand","map","pastCommand","i","key","onKeyDown","push","tabIndex","autoFocus","type","value","onChange","e","Onboarding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQA0BeA,G,KAtBH,kBACV,yBAAKC,UAAU,OACb,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,aAAb,0BAAsC,0BAAMA,UAAU,oBAAhB,YACtC,uBAAGA,UAAU,mBAAb,oBAAgD,6BAAhD,eAAkE,yBAAKA,UAAU,iBAAiBC,IAAI,6BAGxG,0BAAMD,UAAU,eAAhB,wFAEA,yBAAKA,UAAU,4BACb,uBAAGE,KAAK,+BAA+BC,OAAO,SAASH,UAAU,iCAC/D,yBAAKA,UAAU,wBAAwBC,IAAI,2BAA2BG,MAAM,OAD9E,UAIA,uBAAGF,KAAK,8CAA8CC,OAAO,SAASH,UAAU,iCAC9E,yBAAKA,UAAU,wBAAwBC,IAAI,8BAA8BG,MAAM,OADjF,gB,eCdAC,G,MAAW,CACf,KAAQ,CACNC,OAAQ,2CAEV,eAAgB,CACdA,OAAQ,yBAAKL,IAAI,2BAA2BG,MAAM,SAEpD,MAAS,CACPE,OAAQ,mEAEV,OAAU,CACRA,OACA,oCACE,mEACA,4DACA,4DACA,qFAGJ,MAAS,CACPA,OAAQ,MA4CGC,EAxCE,WAAO,IAAD,EACuBC,mBAAS,IADhC,mBACdC,EADc,aAESD,mBAAS,KAFlB,mBAEdE,EAFc,KAELC,EAFK,KAgBrB,OACE,yBAAKX,UAAU,YACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,4BAElB,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,0BACb,yBAAKA,UAAU,4BACZS,EAAeG,KAAI,SAACC,EAAaC,GAAd,OAClB,yBAAKd,UAAU,uBAAuBe,IAAG,UAAKF,GAAL,OAAmBC,IAC1D,uBAAGd,UAAU,qBAAb,sBAAmDa,GACnD,uBAAGb,UAAU,oBAAoBK,EAASQ,IAAgBR,EAASQ,GAAaP,QAAU,uDAKlG,yBAAKN,UAAU,oBAAoBgB,UAxBd,SAAC,GACZ,UADwB,EAAVD,MAExBN,EAAeQ,KAAKP,GAJUC,EAAW,OA2BvC,0BAAMX,UAAU,4BAAhB,sBACA,2BAAOkB,SAAS,IAAIC,WAAS,EAACnB,UAAU,4BAA4BoB,KAAK,OAAOC,MAAOX,EAASY,SA9B5E,SAAAC,GAAC,OAAIZ,EAAWY,EAAEpB,OAAOkB,aClBtCG,EAPI,kBACjB,yBAAKxB,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCEgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bbb5504d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Bio.scss';\r\n\r\nconst Bio = () => (\r\n  <div className=\"bio\">\r\n    <div className=\"bio__information-basic\">\r\n      <p className=\"bio__name\">Heya! ðŸ‘‹ I'm <span className=\"bio__name--heavy\">nikoto.</span></p>\r\n      <p className=\"bio__occupation\">Software Engineer<br />@ Spotahome <img className=\"bio__spotahome\" src=\"./images/spotahome.jpg\" /></p>\r\n    </div>\r\n\r\n    <code className=\"bio__teaser\">Want to know me better? Use the terminal. Start by typing \"help\" and pressing enter.</code>\r\n\r\n    <div className=\"bio__information-socials\">\r\n      <a href=\"https://github.com/nikotomad\" target=\"_blank\" className=\"bio__information-socials-link\">\r\n        <img className=\"bio__information-icon\" src=\"./images/icon-github.svg\" width=\"40\"/>\r\n        Github\r\n      </a>\r\n      <a href=\"https://www.linkedin.com/in/nikolaasverlee/\" target=\"_blank\" className=\"bio__information-socials-link\">\r\n        <img className=\"bio__information-icon\" src=\"./images/icon-linkedin.webp\" width=\"40\"/>\r\n        Linkedin\r\n      </a>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Bio;","import React, { useState } from 'react';\r\n\r\nimport './Terminal.scss';\r\n\r\nconst commands = {\r\n  'help': {\r\n    result: '[available commands are]: skills, about'\r\n  },\r\n  'whois weapon': {\r\n    result: <img src=\"./images/avatar-niko.jpg\" width=\"100\"/>\r\n  },\r\n  'about': {\r\n    result: 'Software Engineer from Belgium. Data freak. Clean code fanatic.'\r\n  },\r\n  'skills': {\r\n    result: \r\n    <>\r\n      <p>Frontend: React, React Native, Redux</p>\r\n      <p>Backend & DB: Node.js + Mongo</p>\r\n      <p>Testing: Jest, Cypress, Detox</p>\r\n      <p>Other: Test driven development, BDD, Kibana, Grafana</p>\r\n    </>\r\n  },\r\n  'clear': {\r\n    result: ''\r\n  }\r\n}\r\n\r\nconst Terminal = () => {\r\n  const [commandHistory, setCommandHistory] = useState([]);\r\n  const [command, setCommand] = useState('');\r\n\r\n  const handleInputChange = e => setCommand(e.target.value);\r\n\r\n  const clearCommandEmitter = () => setCommand('');\r\n\r\n  const handleKeyPressed = ({ key }) => {\r\n    if (key === 'Enter') {\r\n      commandHistory.push(command);\r\n      clearCommandEmitter();\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"terminal\">\r\n      <div className=\"terminal__navbar\">\r\n        <span className=\"terminal__navbar-close\" />\r\n      </div>\r\n      <div className=\"terminal__screen\">\r\n        <p className=\"terminal__screen-hint\"></p>\r\n        <div className=\"terminal__screen-results\">\r\n          {commandHistory.map((pastCommand, i) => (\r\n            <div className=\"terminal__screen-row\" key={`${pastCommand}${i}`}>\r\n              <p className=\"terminal__command\">C:\\users\\guest - {pastCommand}</p>\r\n              <p className=\"terminal__result\">{commands[pastCommand] && commands[pastCommand].result || 'Command not found. Type \"help\" for more info.'}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"terminal__actions\" onKeyDown={handleKeyPressed}>\r\n        <span className=\"terminal__actions-symbol\">$ C:\\users\\guest</span>\r\n        <input tabIndex=\"0\" autoFocus className=\"terminal__actions-command\" type=\"text\" value={command} onChange={handleInputChange}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Terminal;\r\n","import React from 'react';\r\n\r\nimport Bio from './Bio';\r\n\r\nimport './Homepage.scss';\r\nimport Terminal from './Terminal';\r\n\r\nconst Onboarding = () => (\r\n  <div className=\"homepage\">\r\n    <Bio />\r\n    <Terminal />\r\n  </div>\r\n)\r\n\r\nexport default Onboarding;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Homepage from './components/Homepage';\r\n\r\nimport './resets.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Homepage />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}